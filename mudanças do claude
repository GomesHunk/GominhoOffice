# Corre√ß√µes Espec√≠ficas

## 1. Hook Melhorado (substitua seu hook-streamlit.py)

```python
from PyInstaller.utils.hooks import collect_all, collect_data_files

datas, binaries, hiddenimports = collect_all('streamlit')

# Adiciona imports essenciais que seu app usa
hiddenimports += [
    'streamlit.web.cli',
    'streamlit.runtime.scriptrunner.magic_funcs',
    'requests',
    'bs4',
    'zipfile',
    'io',
    'logging'
]
```

## 2. Launcher Corrigido (substitua executavel_launcher.py)

```python
import sys
import os
import subprocess
import webbrowser
import time
import threading
import socket

def get_free_port(start_port=8501):
    """Encontra uma porta livre a partir da porta inicial"""
    port = start_port
    while port < start_port + 10:  # Testa at√© 10 portas
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('localhost', port))
                return port
        except OSError:
            port += 1
    raise Exception("Nenhuma porta dispon√≠vel encontrada")

def open_browser(port):
    time.sleep(4)  # Aguarda mais tempo para garantir que o Streamlit iniciou
    webbrowser.open(f'http://localhost:{port}')

if __name__ == "__main__":
    print("üîÑ Iniciando Localizador de Desenhos...")
    
    # Localiza o script no execut√°vel
    if getattr(sys, 'frozen', False):
        base_path = sys._MEIPASS
    else:
        base_path = os.path.dirname(os.path.abspath(__file__))
    
    script_path = os.path.join(base_path, "Legacy_Searcher.py")
    
    if not os.path.exists(script_path):
        print(f"‚ùå Script n√£o encontrado: {script_path}")
        input("Pressione Enter para sair...")
        sys.exit(1)

    # Encontra porta livre
    try:
        port = get_free_port(8501)
        print(f"üåê Usando porta: {port}")
    except Exception as e:
        print(f"‚ùå Erro ao encontrar porta: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)

    # Abre browser automaticamente
    threading.Thread(target=open_browser, args=(port,), daemon=True).start()
    
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", script_path,
            f"--server.port={port}",
            "--server.headless=true",
            "--browser.gatherUsageStats=false",
            "--server.enableCORS=false"
        ])
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        input("Pressione Enter para sair...")
```

## 3. Comando de Build (COMPLETO - inclui TUDO)

```bash
pyinstaller --onefile --name=LegacySearcher --add-data="Legacy_Searcher.py;." --collect-all=streamlit --collect-all=requests --collect-all=bs4 --hidden-import=streamlit.web.cli --hidden-import=streamlit.runtime.scriptrunner.magic_funcs --hidden-import=requests --hidden-import=bs4 --hidden-import=socket --hidden-import=webbrowser --hidden-import=threading executavel_launcher.py
```

## 4. Se der erro, use arquivo .spec:

```python
# LegacySearcher.spec
from PyInstaller.utils.hooks import collect_all

datas, binaries, hiddenimports = collect_all('streamlit')

a = Analysis(
    ['executavel_launcher.py'],
    pathex=[],
    binaries=binaries,
    datas=datas + [('Legacy_Searcher.py', '.')],
    hiddenimports=hiddenimports + [
        'streamlit.web.cli',
        'requests', 'bs4', 'zipfile', 'io', 'logging'
    ],
    hookspath=['./'],
    excludes=[],
)

exe = EXE(
    a.scripts + a.binaries + a.datas,
    [],
    name='LegacySearcher',
    debug=False,
    console=True,
)
```

Execute: `pyinstaller LegacySearcher.spec`