"""
Leitor de Cart√µes de Gerenciamento Di√°rio
Vers√£o melhorada com tratamento de erros, interface aprimorada e c√≥digo mais robusto.

Este script realiza as seguintes fun√ß√µes:
1. Permite selecionar uma pasta contendo imagens de cart√µes
2. Renomeia arquivos .jfif para .jpg automaticamente
3. Extrai informa√ß√µes usando OCR (Tesseract)
4. Exibe dados em uma interface gr√°fica melhorada
5. Permite exportar para CSV com op√ß√£o de escolher local de salvamento
"""

import pytesseract
from PIL import Image, ImageEnhance, ImageFilter
import os
import csv
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import re
import threading
from pathlib import Path
import logging
from typing import Dict, List, Optional

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class TesseractConfig:
    """Classe para gerenciar a configura√ß√£o do Tesseract"""
    
    @staticmethod
    def find_tesseract():
        """Encontra automaticamente o execut√°vel do Tesseract"""
        possible_paths = [
            r'C:\Users\gomesg1\AppData\Local\Programs\Tesseract-OCR\tesseract.exe',
            r'C:\Program Files\Tesseract-OCR\tesseract.exe',
            r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe',
            '/usr/bin/tesseract',
            '/usr/local/bin/tesseract',
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
        
        # Tenta encontrar no PATH
        import shutil
        tesseract_path = shutil.which('tesseract')
        if tesseract_path:
            return tesseract_path
            
        return None
    
    @staticmethod
    def setup_tesseract():
        """Configura o Tesseract"""
        tesseract_path = TesseractConfig.find_tesseract()
        if tesseract_path:
            pytesseract.pytesseract.tesseract_cmd = tesseract_path
            logger.info(f"Tesseract configurado em: {tesseract_path}")
            return True
        else:
            logger.error("Tesseract n√£o encontrado no sistema")
            return False


class ImageProcessor:
    """Classe para processamento de imagens"""
    
    @staticmethod
    def enhance_image(image: Image.Image) -> Image.Image:
        """Melhora a qualidade da imagem para OCR"""
        try:
            # Converte para escala de cinza
            if image.mode != 'L':
                image = image.convert('L')
            
            # Aumenta o contraste
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(2.0)
            
            # Aumenta a nitidez
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(2.0)
            
            # Redimensiona se muito pequena
            if image.width < 800:
                ratio = 800 / image.width
                new_height = int(image.height * ratio)
                image = image.resize((800, new_height), Image.Resampling.LANCZOS)
            
            return image
        except Exception as e:
            logger.error(f"Erro ao processar imagem: {e}")
            return image


class TextExtractor:
    """Classe para extra√ß√£o de texto usando OCR"""
    
    @staticmethod
    def extract_text_from_image(image_path: str) -> str:
        """Extrai texto de uma imagem usando OCR"""
        try:
            image = Image.open(image_path)
            enhanced_image = ImageProcessor.enhance_image(image)
            
            # Configura√ß√µes customizadas do Tesseract
            custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz:.-/% '
            
            text = pytesseract.image_to_string(
                enhanced_image, 
                lang='por+eng',
                config=custom_config
            )
            
            return text.strip()
        except Exception as e:
            logger.error(f"Erro ao extrair texto de {image_path}: {e}")
            return ""


class FieldExtractor:
    """Classe para extra√ß√£o de campos espec√≠ficos do texto"""
    
    @staticmethod
    def extract_fields(text: str) -> Dict[str, str]:
        """Extrai campos espec√≠ficos do texto usando regex"""
        fields = {
            "ID": "",
            "CDD": "",
            "ACT": "",
            "PDD0": "",
            "PDD1": "",
            "PDD2": "",
            "HH EST": "",
            "HH PROC": "",
            "CONC.ACT": "",
            "Status CDD": ""
        }
        
        # Padr√µes de regex para cada campo
        patterns = {
            "ID": r'ID[:\s]*([A-Za-z0-9\-]+)',
            "CDD": r'CDD[:\s]*([A-Za-z0-9\-\.]+)',
            "ACT": r'ACT[:\s]*([A-Za-z0-9\-\./%]+)',
            "PDD0": r'PDD0[:\s]*([A-Za-z0-9\-\./%]+)',
            "PDD1": r'PDD1[:\s]*([A-Za-z0-9\-\./%]+)',
            "PDD2": r'PDD2[:\s]*([A-Za-z0-9\-\./%]+)',
            "HH EST": r'HH\s*Est[:\s]*([0-9\-\.]+)',
            "HH PROC": r'PROC[:\s]*([0-9\-\.]+)',
            "CONC.ACT": r'CONC\.ACT[:\s]*([A-Za-z0-9\-\./%]+)',
        }
        
        # Aplica os padr√µes
        for field, pattern in patterns.items():
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                fields[field] = match.group(1).strip()
        
        # L√≥gica espec√≠fica para HH EST e HH PROC em uma linha
        hh_pattern = r'HH\s*Est[:\s]*([0-9\-\.]+).*?PROC[:\s]*([0-9\-\.]+)'
        hh_match = re.search(hh_pattern, text, re.IGNORECASE)
        if hh_match:
            fields["HH EST"] = hh_match.group(1).strip()
            fields["HH PROC"] = hh_match.group(2).strip()
        
        return fields


class FileManager:
    """Classe para gerenciamento de arquivos"""
    
    @staticmethod
    def rename_jfif_to_jpg(folder_path: str) -> int:
        """Renomeia arquivos .jfif para .jpg"""
        renamed_count = 0
        try:
            for filename in os.listdir(folder_path):
                if filename.lower().endswith('.jfif'):
                    old_path = os.path.join(folder_path, filename)
                    new_filename = filename[:-5] + '.jpg'
                    new_path = os.path.join(folder_path, new_filename)
                    
                    if not os.path.exists(new_path):
                        os.rename(old_path, new_path)
                        logger.info(f"Renomeado: {filename} -> {new_filename}")
                        renamed_count += 1
                    else:
                        logger.warning(f"Arquivo {new_filename} j√° existe, pulando {filename}")
        except Exception as e:
            logger.error(f"Erro ao renomear arquivos: {e}")
        
        return renamed_count
    
    @staticmethod
    def get_image_files(folder_path: str) -> List[str]:
        """Retorna lista de arquivos de imagem na pasta"""
        extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp')
        image_files = []
        
        try:
            for filename in os.listdir(folder_path):
                if filename.lower().endswith(extensions):
                    image_files.append(os.path.join(folder_path, filename))
        except Exception as e:
            logger.error(f"Erro ao listar arquivos: {e}")
        
        return sorted(image_files)


class CardReaderGUI:
    """Interface gr√°fica principal"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.data = []
        self.setup_ui()
        self.setup_tesseract()
    
    def setup_tesseract(self):
        """Configura o Tesseract na inicializa√ß√£o"""
        if not TesseractConfig.setup_tesseract():
            messagebox.showerror(
                "Erro de Configura√ß√£o",
                "Tesseract OCR n√£o foi encontrado no sistema.\n"
                "Por favor, instale o Tesseract OCR:\n"
                "https://github.com/tesseract-ocr/tesseract"
            )
    
    def setup_ui(self):
        """Configura a interface do usu√°rio"""
        self.root.title("Leitor de Cart√µes GD - Vers√£o Melhorada")
        self.root.geometry("1000x600")
        self.root.minsize(800, 500)
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar redimensionamento
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # Frame para bot√µes
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Bot√µes
        self.select_button = ttk.Button(
            button_frame, 
            text="üìÅ Selecionar Pasta", 
            command=self.select_folder
        )
        self.select_button.grid(row=0, column=0, padx=(0, 5))
        
        self.export_button = ttk.Button(
            button_frame, 
            text="üíæ Exportar CSV", 
            command=self.export_to_csv,
            state='disabled'
        )
        self.export_button.grid(row=0, column=1, padx=5)
        
        self.clear_button = ttk.Button(
            button_frame,
            text="üóëÔ∏è Limpar Dados",
            command=self.clear_data
        )
        self.clear_button.grid(row=0, column=2, padx=5)
        
        # Barra de progresso
        self.progress_var = tk.StringVar(value="Pronto para processar")
        self.progress_label = ttk.Label(main_frame, textvariable=self.progress_var)
        self.progress_label.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='determinate')
        self.progress_bar.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(25, 5))
        
        # Tabela
        self.setup_treeview(main_frame)
        
        # Barra de status
        self.status_var = tk.StringVar(value="Pronto")
        status_bar = ttk.Label(
            main_frame, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN, 
            anchor=tk.W
        )
        status_bar.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
    def setup_treeview(self, parent):
        """Configura a tabela de dados"""
        # Frame para a tabela
        tree_frame = ttk.Frame(parent)
        tree_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        tree_frame.columnconfigure(0, weight=1)
        tree_frame.rowconfigure(0, weight=1)
        
        # Colunas
        columns = ("ID", "CDD", "ACT", "PDD0", "PDD1", "PDD2", "HH EST", "HH PROC", "CONC.ACT", "Status CDD")
        
        # Treeview
        self.tree = ttk.Treeview(tree_frame, columns=columns, show="headings")
        
        # Configurar colunas
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=90, anchor="center", minwidth=70)
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient="horizontal", command=self.tree.xview)
        
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Grid layout
        self.tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
    def select_folder(self):
        """Seleciona pasta e inicia processamento"""
        folder_path = filedialog.askdirectory(title="Selecione a pasta com as imagens dos cart√µes")
        if folder_path:
            # Executar em thread separada para n√£o travar a UI
            thread = threading.Thread(target=self.process_folder, args=(folder_path,))
            thread.daemon = True
            thread.start()
    
    def process_folder(self, folder_path: str):
        """Processa a pasta selecionada"""
        try:
            self.update_status("Processando...")
            self.progress_var.set("Renomeando arquivos...")
            
            # Renomear arquivos .jfif
            renamed_count = FileManager.rename_jfif_to_jpg(folder_path)
            if renamed_count > 0:
                self.progress_var.set(f"{renamed_count} arquivos renomeados")
            
            # Obter lista de imagens
            image_files = FileManager.get_image_files(folder_path)
            
            if not image_files:
                messagebox.showwarning("Aviso", "Nenhuma imagem encontrada na pasta selecionada.")
                self.update_status("Nenhuma imagem encontrada")
                return
            
            # Processar imagens
            self.data = []
            total_files = len(image_files)
            
            for i, image_path in enumerate(image_files):
                filename = os.path.basename(image_path)
                self.progress_var.set(f"Processando {filename} ({i+1}/{total_files})")
                self.progress_bar['value'] = ((i + 1) / total_files) * 100
                
                # Extrair texto
                text = TextExtractor.extract_text_from_image(image_path)
                
                # Extrair campos
                fields = FieldExtractor.extract_fields(text)
                
                # Adicionar nome do arquivo para refer√™ncia
                fields['Arquivo'] = filename
                
                self.data.append(fields)
                
                # Atualizar UI
                self.root.after(0, self.update_display)
            
            # Finalizar
            self.progress_var.set(f"Processamento conclu√≠do - {total_files} imagens processadas")
            self.progress_bar['value'] = 100
            self.update_status(f"{total_files} cart√µes processados")
            
            # Habilitar bot√£o de exportar
            self.export_button['state'] = 'normal'
            
        except Exception as e:
            error_msg = f"Erro durante o processamento: {str(e)}"
            logger.error(error_msg)
            messagebox.showerror("Erro", error_msg)
            self.update_status("Erro no processamento")
    
    def update_display(self):
        """Atualiza a exibi√ß√£o da tabela"""
        # Limpar tabela
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Adicionar dados
        for fields in self.data:
            values = [fields.get(col, "") for col in ("ID", "CDD", "ACT", "PDD0", "PDD1", "PDD2", "HH EST", "HH PROC", "CONC.ACT", "Status CDD")]
            self.tree.insert("", "end", values=values)
    
    def export_to_csv(self):
        """Exporta dados para CSV"""
        if not self.data:
            messagebox.showwarning("Aviso", "Nenhum dado para exportar.")
            return
        
        # Escolher local para salvar
        file_path = filedialog.asksaveasfilename(
            title="Salvar arquivo CSV",
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, mode='w', newline='', encoding='utf-8') as file:
                    if self.data:
                        fieldnames = list(self.data[0].keys())
                        writer = csv.DictWriter(file, fieldnames=fieldnames)
                        writer.writeheader()
                        writer.writerows(self.data)
                
                messagebox.showinfo("Sucesso", f"Dados exportados com sucesso para:\n{file_path}")
                self.update_status(f"Dados exportados para {os.path.basename(file_path)}")
                
            except Exception as e:
                error_msg = f"Erro ao exportar: {str(e)}"
                logger.error(error_msg)
                messagebox.showerror("Erro", error_msg)
    
    def clear_data(self):
        """Limpa os dados da tabela"""
        if messagebox.askyesno("Confirmar", "Deseja limpar todos os dados?"):
            self.data = []
            self.update_display()
            self.export_button['state'] = 'disabled'
            self.progress_var.set("Dados limpos - Pronto para processar")
            self.progress_bar['value'] = 0
            self.update_status("Dados limpos")
    
    def update_status(self, message: str):
        """Atualiza a barra de status"""
        self.status_var.set(message)
        self.root.update_idletasks()
    
    def run(self):
        """Inicia a aplica√ß√£o"""
        self.root.mainloop()


def main():
    """Fun√ß√£o principal"""
    try:
        app = CardReaderGUI()
        app.run()
    except Exception as e:
        logger.error(f"Erro fatal: {e}")
        messagebox.showerror("Erro Fatal", f"Erro inesperado: {str(e)}")


if __name__ == "__main__":
    main()